<CascadingValue Value=this>
    @if (ErrorDisplay == true)
    {
        <div class="alert alert-danger" role="alert">
            <p class="mb-0">
                @foreach (var item in Message)
                {
                    @item
                }
            <button type="button" class="close" aria-label="Close" @onclick="() => DismissError()">
                <span aria-hidden="true">&times;</span>
            </button>
        </p>
    </div>
}
    @if (LoadingDisplay == true)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>

    }
    @if (WarningDisplay == true)
    {
        <div class="alert alert-warning" role="alert">
            <p class="mb-0">
                @foreach (var item in Message)
                {
                    @item
                }
            <button type="button" class="close" aria-label="Close" @onclick="() => DismissWarning()">
                <span aria-hidden="true">&times;</span>
            </button>
        </p>
    </div>
}
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public List<string> Message { get; private set; }

    private bool ErrorDisplay { get; set; }

    private bool LoadingDisplay { get; set; }

    private bool WarningDisplay { get; set; }

    public Notification()
    {
        this.Message = new List<string>();
    }

    public void DisplayLoading()
    {
        LoadingDisplay = true;
        this.StateHasChanged();
    }

    public void HideLoading()
    {
        LoadingDisplay = false;
        this.StateHasChanged();
    }

    public void ProcessWarning(IEnumerable<string> messages)
    {
        Message = messages.ToList();
        foreach (var m in Message)
        {
            Console.WriteLine(m);
        }
        WarningDisplay = true;
        this.StateHasChanged();
    }

    public void ProcessError(Exception ex)
    {
        Message.Add(ex.Message);
        ErrorDisplay = true;
        this.StateHasChanged();
    }

    public void DismissError()
    {
        ErrorDisplay = false;
        this.Message = new List<string>();
        this.StateHasChanged();
    }
    public void DismissWarning()
    {
        WarningDisplay = false;
        this.Message = new List<string>();
        this.StateHasChanged();
    }
}